---
###
### Linkerd Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd
  annotations:
    linkerd.io/inject: disabled
  labels:
    linkerd.io/is-control-plane: "true"
    config.linkerd.io/admission-webhooks: disabled
    linkerd.io/control-plane-ns: linkerd
---
###
### Identity Controller Service RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-identity
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["create"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-identity
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-identity
subjects:
- kind: ServiceAccount
  name: linkerd-identity
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-identity
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
---
###
### Destination Controller Service
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-destination
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["list", "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "nodes", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["split.smi-spec.io"]
  resources: ["trafficsplits"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-destination
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-destination
subjects:
- kind: ServiceAccount
  name: linkerd-destination
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-destination
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-sp-validator-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUlLOGlFZHNoVkpBKzZtQ3Q4VVBrcW93RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakV4TURJeU1UY3lNVEU1V2hjTk1qSXhNREl5TVRjeU1URTVXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxqc2VRTDFjVzhxT3NnLzhKME1kYW9VWGs4dHp4eGlxSUd5V3Q2OVk1RUlmU1JKb2ZkVApDOVdjYW1zbXRnZWt5bHVqSlZOR2tSS256cnFnU2dxUld6WEwwR2kvSDV4K012WG41SWZoR2hIdjRRZkFhQVhsCmhob0hwZHRUNXl1NWh5eFZrZTRmeGlzQjdQRWtkOXAvWGRqNkFkY3VubEw3bTcrc3l1UWRUaU9nbXpRaysyWDAKZkZIZjV4NHgzRW9teE44OENUMkNRSG5lRE8zZ25wK2MxY1JES2FWb09zeGtFLzZDSk1aaVlsdmIvcXZMeXQ2OAo0K2VPQXhUSWZkMEM5SzY4SHVISlpXUzJQY09TSFpJK24rQkdOandiTk1HRjRkRWVFREZoanp6VkFlYkxyazgzCmFBajc5UkxJcTVBaXo4QWJ0eW43aE1MdlV1K2wzbDNOOGk4Q0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBT29TNGttUTZWNjZ6RlZ2TDR0OU9aZVVYYlptTWVOZk1kd2hyaHl5c04KdnBhNmU0djRZcW1PcGI4dlg5WXFGamE4Y05kS1VKOWpwZStFOXdiMVV1MjBrNW9FT0pvNjNLSXprb1JyM0R3MApqVGw2TjJ4eVYvUWZCN1NOSTdUYkNRU2RBSE1waiszSi9pc2NkbWR4Tmd2V0dvYjVwT3JMSlA3OGliNDJDaW50CkhLQk1Ha0ZKZFpFcDAxUGZUd3BlQm1KRFdpZEQ2MGZDcXN5ZHhjbEFPWVhicjhQVldGeUlKS2UzMGVTdlp2SDQKUWt5KzkxTWY4TDBzc01sb2I5eXQ2aCtrZ3pNc3IrSkJpM0lucXJ6c1dvbmRXdUNaeDdwdU0xN21GMWRMMFd0ZwpuSEF4Nkw2UjBlNzNWalY0b28zbUVMU3plbXhPWlppWllBalhPSFpTVFROegotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdU94NUF2VnhieW82eUQvd25ReDFxaFJlVHkzUEhHS29nYkphM3IxamtRaDlKRW1oCjkxTUwxWnhxYXlhMkI2VEtXNk1sVTBhUkVxZk91cUJLQ3BGYk5jdlFhTDhmbkg0eTllZmtoK0VhRWUvaEI4Qm8KQmVXR0dnZWwyMVBuSzdtSExGV1I3aC9HS3dIczhTUjMybjlkMlBvQjF5NmVVdnVidjZ6SzVCMU9JNkNiTkNUNwpaZlI4VWQvbkhqSGNTaWJFM3p3SlBZSkFlZDRNN2VDZW41elZ4RU1wcFdnNnpHUVQvb0lreG1KaVc5ditxOHZLCjNyemo1NDRERk1oOTNRTDBycndlNGNsbFpMWTl3NUlka2o2ZjRFWTJQQnMwd1lYaDBSNFFNV0dQUE5VQjVzdXUKVHpkb0NQdjFFc2lya0NMUHdCdTNLZnVFd3U5Uzc2WGVYYzN5THdJREFRQUJBb0lCQUFWb3ZWMXR5b1NpNnBkQwo3NG5ZZkhTZUplZ1JBZmJsbCtJN1VsY2ptUTc3L1pVYkprYXl3aXpjWjJ4ODlHUWkyTngzV0Rjb1lFUDRicDZjCjQ2Mk5kT3FNN0txenRId0NZUUU2YUQvbFFMcjNsbENBdTBvNDNZUlRadkdVY2JXZ3RxaUFWRVZ2M244UmpsbTcKWkZvYTBhYndJUytuS0hCcTliSlVucGF2bU1LSCttUlF3UHFGWFI4VFNNeERtcVJZV091WmI4QkxBdUd5TWxYRQoyRWNYTm9IVnpmTmV2aTNQUk1JWVExNGFSSkMwbEZhakxLV1plL3ZxVDNpbU5iQ0o1NEMzZmQyZUFOL3YxMk1SCmN6Ni9XdytNY1NvN0dvRCt4ckZXcnAyMXpVbFFvWGdyb0lEUzRhZDdvcHNhdnVTbmU1QWtidSs3NC9nQ0gvZW0KTytlUjB2a0NnWUVBei9SODB0SDRsQlQxNFJIeGlmWUpaM05GcWJoZWZXRmpxUmZ6cUdlVWpCVWFmZFpubGhHVApRWWNkcGNyK2UrTmFxOFluOGhoN0ZPZEZzR1VCU24xWTFSNGc2b3F6YmN6dmpWeHRtaDFTR28xNUZyVXNQN0g1CkRPeGx1WjNNeE9BOGF0NGQwMUczK2tNUTlGQzZrdEhFdTgyRWl1bVhtcDEvTmM0bjBOTGFHYnNDZ1lFQTQ2WE0KQ3NMeDhIVjdWWkRPQmE2b1dNRS9nZUJoYjJka0ZaV3EvRjdUM0FveFlVVFQxV1lYSDNpNW9sSmY4RGtOcTZ4cQpZc0RsMnBEZWdaQzBsOVN6bVdmZ2Ixbm9YUmUvVFE5TE11ZU9aamlQVk5xZzN1RXNkTHBXVXcxUTBXeC9wWHVsCldqSVAyMzczOGRZS0Z6aWtTci82aElBYzZQVTNmc2U1ckJWV21CMENmempjb1VVRUpQUll4dUxFQlVlei90NUsKcHNIQnFCU2dqSit2N1BBZlluN3JSbE1pVFRDN25ZaE5hYzNyczZvc2dKNTNrSFNpUFFWNk41UUVDbFpUNy9aVwpScW5iUXpUQzFMM1NpQ1diM3RkajE3aGQwYnVZN29DYUl6YWQ3MS9sOEo5SUhOK3JlS0wxczYwYVplbS9jZ3ZvCkpsWFZpWjY5Y2d0RVU1N0dDTjBDZ1lFQXBjTXZmVktRYTJDUWF6RGk0NzVYTlRHYU5jOFdBOUhNVGU5S3J6TzUKbndzSkErUGpRQXR6b09YK2ZoVHZhUE9TWWNSTlB4VnBDYXJkYW9qZEI0WEpOVll2VmNXbzdraUJjdkpFOW84bgo0SVVrMFV2VlFoWENra2l3M1E3Z0gyNmF6L3ZsM25SL21YdXR2Ym4yWlF4SWpXbVhXRzRWSHdpWDNVZy9pZStMCnUzMENnWUVBbjFXMUIwcTNKOFFpVUlVY2I1OFJjMlBDNWZCRDEyeUJHelVGU05tWXArQS9jYVdIVEoya1plSXIKVzFqMUp5MVFJK3oyUk9rR2Y1ZUR3a045RThXQ3pxcHFsdElNYlg4cjB1Nk5RTW82anV0ZTYyT1BsZHJKN1pWTQoxN29XS3FIVTlxd2RrM1ZGMXRDRmVJS2l3ZkFNV2ZuM05LSzc1bS9SSjF3TDk1TzR3clE9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: linkerd-sp-validator-webhook-config
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
webhooks:
- name: linkerd-sp-validator.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
  clientConfig:
    service:
      name: linkerd-sp-validator
      namespace: linkerd
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUlLOGlFZHNoVkpBKzZtQ3Q4VVBrcW93RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakV4TURJeU1UY3lNVEU1V2hjTk1qSXhNREl5TVRjeU1URTVXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxqc2VRTDFjVzhxT3NnLzhKME1kYW9VWGs4dHp4eGlxSUd5V3Q2OVk1RUlmU1JKb2ZkVApDOVdjYW1zbXRnZWt5bHVqSlZOR2tSS256cnFnU2dxUld6WEwwR2kvSDV4K012WG41SWZoR2hIdjRRZkFhQVhsCmhob0hwZHRUNXl1NWh5eFZrZTRmeGlzQjdQRWtkOXAvWGRqNkFkY3VubEw3bTcrc3l1UWRUaU9nbXpRaysyWDAKZkZIZjV4NHgzRW9teE44OENUMkNRSG5lRE8zZ25wK2MxY1JES2FWb09zeGtFLzZDSk1aaVlsdmIvcXZMeXQ2OAo0K2VPQXhUSWZkMEM5SzY4SHVISlpXUzJQY09TSFpJK24rQkdOandiTk1HRjRkRWVFREZoanp6VkFlYkxyazgzCmFBajc5UkxJcTVBaXo4QWJ0eW43aE1MdlV1K2wzbDNOOGk4Q0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBT29TNGttUTZWNjZ6RlZ2TDR0OU9aZVVYYlptTWVOZk1kd2hyaHl5c04KdnBhNmU0djRZcW1PcGI4dlg5WXFGamE4Y05kS1VKOWpwZStFOXdiMVV1MjBrNW9FT0pvNjNLSXprb1JyM0R3MApqVGw2TjJ4eVYvUWZCN1NOSTdUYkNRU2RBSE1waiszSi9pc2NkbWR4Tmd2V0dvYjVwT3JMSlA3OGliNDJDaW50CkhLQk1Ha0ZKZFpFcDAxUGZUd3BlQm1KRFdpZEQ2MGZDcXN5ZHhjbEFPWVhicjhQVldGeUlKS2UzMGVTdlp2SDQKUWt5KzkxTWY4TDBzc01sb2I5eXQ2aCtrZ3pNc3IrSkJpM0lucXJ6c1dvbmRXdUNaeDdwdU0xN21GMWRMMFd0ZwpuSEF4Nkw2UjBlNzNWalY0b28zbUVMU3plbXhPWlppWllBalhPSFpTVFROegotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["linkerd.io"]
    apiVersions: ["v1alpha1", "v1alpha2"]
    resources: ["serviceprofiles"]
  sideEffects: None
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-policy-validator-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRZUs3Yi8zN2pMZjhWMEZJODBpeFdGREFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpFeE1ESXlNVGN5TVRFNVdoY05Nakl4TURJeU1UY3lNVEU1V2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUN5VzZkYzdZc0ZHaFdCeFdjWElqWGVIMXZEbnFQRFhaalU2dXZINndaUwpkY3FPUVM1MGJqQkU5MklIa0dCM1Y5cSt4eW1CVmRVSm0wbktHWVYrUlNWa0pKc2dnQlN2MGRQVUFNbVJJaFlrCkQ5N1ZqNWtkelhaZkg3L1NaWHlTMVBEZFV1L00vVFgwUjY2cjB0OGVFdG9vVERwV1JsS0Rrazh3Qkh4NjdlbkUKWlJpUW4xSWM0RklmdEhNK3BMOE52a0x3K0xVVUVRUkg2Z0plQ2N4Yk8xcm5HM2UrTU03eVEwc1NqMm5TWVdwVQpXQUVGdGdsZjU3cjNXRVFHNFhLcCt4anlWN2F5NkFFeGVUSFFQdW1MdUhpWnQ3YTZUeStqKy9IanNGeDR3N3IwCjl5c0FwVGk3cnQwclhyd2xVZE9jRmxHWlZJR1EyWHZRL3RGQWJaOFlQaERuQWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFYXVvN1l5NkNiT01Rb2cvUnc0Y05sTzF6TC8KRzc1Z0pMSUEyM2xGczhBTmViUHpHNnMwSWRGSGJuL1czWEdEWGtYM0dLcVB5czJ4Y04xaDZkRTZreEFFcFRZdgowVGo4UDNmZTl2ZVdMelQzZTJrejgxY0ZJbmU2R1NIQThZa3FNVmtGZndINU9zM0pYRmF1ckttWXVDQ3M0ejdyCkVSMVZmZFM3T1NNQTVHZ1hTTUlzWU9xNmNKV0pHUnE4Y2l3N2tGeWRwVmNkTmRGNWk5bDkrb0JIT1Y2d3dnSkYKM2YxK2pOa0N2aFMwR2ZVMGNGTDhKaVV0RlMvSUYwdUhpSi9iWEMrUmFldmhERWVicHpSK1cvN3hvQVJaNStnUwo4UFJxN282OVpRY2IwVnlIemhNOWFScWRBTGprSXdOYlR6UGxiOTNrTm9tMWRWR1BUWlFOaUN0S3hjOD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBc2x1blhPMkxCUm9WZ2NWbkZ5STEzaDlidzU2ancxMlkxT3JyeCtzR1VuWEtqa0V1CmRHNHdSUGRpQjVCZ2QxZmF2c2NwZ1ZYVkNadEp5aG1GZmtVbFpDU2JJSUFVcjlIVDFBREprU0lXSkEvZTFZK1oKSGMxMlh4Ky8wbVY4a3RUdzNWTHZ6UDAxOUVldXE5TGZIaExhS0V3NlZrWlNnNUpQTUFSOGV1M3B4R1VZa0o5UwpIT0JTSDdSelBxUy9EYjVDOFBpMUZCRUVSK29DWGduTVd6dGE1eHQzdmpETzhrTkxFbzlwMG1GcVZGZ0JCYllKClgrZTY5MWhFQnVGeXFmc1k4bGUyc3VnQk1Ya3gwRDdwaTdoNG1iZTJ1azh2by92eDQ3QmNlTU82OVBjckFLVTQKdTY3ZEsxNjhKVkhUbkJaUm1WU0JrTmw3MFA3UlFHMmZHRDRRNXdJREFRQUJBb0lCQVFDT3pKRC85dlFDUHJNUApkblFtY201OGk5RFZtMUwwWFNDNi8rZU01Wi9uTDRYZ1JWR2pTSUYvQmkzSGJwRzltMnA0cWs2UnpaM0dsajBMCkFVbi9JZTlnOFduK0tHM25vdkNkWVpBQWtqRDE2SHI1czRIYytaNlhaSDBaUDhYd2JXcjNXS3JFRGNzLzdKQnQKNDJSZDJLd3Y3WEFibVN3QlNZZjdJdXhqSTg2eFBRV3pvWXdwbytsWFhoNlBlRmorNUJjS0QrMU16RHNIN2dQdQpsL1ViL3Z6bENsUUF5NlZUQnRnblgwZ0p4dU1PWVIrRFRBc1Z1NHQrNTJLbURRZUdOaWJkMVIxdm5MYWhKV3R5CmFURHU0eURLekFDVHN0ZG9tb01JOFY1VC9VcFd2em8wdjhJM0VYcEtNa3NXakZVZTZPcjQ2ODhkRGI5NkZkbWIKdE9yMGwzV0pBb0dCQU5QcGNlYTNSaXMwdVp4N3AvdVROSzhzMUNQUERjeXZreGJ4QjRoTENDbUZSRHJEbTB6ZgpySWtFYjIwY2hHaUdFY2xabDhRb2I0clJaS1EzZTl2dDdNenF1RUFwODY2UWQvQ2VraDBiVWVqYSt4dWFOMGxXCjV2ZlgrM0RRVFdxVmwrV2JYUFlQeWM3ZGtsZ1VpTlAyU0RSMmxwUG9Rc0NZSFRnREdkZUdXZmc5QW9HQkFOZDMKSEFNOTFFRTM5aWFSVGwyVS9FVTRZeWdyZzA3cVZYZGw1OTRmdzExUHdPL0ZGcmhNVXlhQ3A2NThxS05PS2VRawp6ZlVKeFZFNFUzeWQybk12bEdYTTFSbWxyM2RENGFHMy8xTEJJRm5jN3VRTDhRZHRNelZFcjJ6em40MjI3NFU3CktId0RpNkVJZUxKMGxLallvMWRZc3RWbXdqZ1pHN3lrbGhoVDNSdnpBb0dBRTdFYnZuN0ZiSHBuelJ6SWpWNHUKaFNDN1RlQ052Ym1MQjVTNlNIWUFlaXRDSGR2VGNKOVFYeU1rWDVWSTBKVzB6V3NmNlVDQXJQdXNTSDVIYWpaLwp6TUw3QUN0bDA1RGxORnpuNHdDSTZnUi9WUjlOaCtrbGFWNk9wUHNXVnBNMEhFZ0ZxVy9xSnVqOEVtZEdGN3hKCkZXYjNzeUxnSVJtQmpaVHNMOVR5UTFrQ2dZRUEwTklqV0JEb1VYMEhGMEhralZZRFdLTFpsdWoxRGRxV2ttMDEKVjFXNVpnb1JsMCtRUVhYWGNJOVlMQWVzK1BpY0tQeHlqM1cwd282d2V5b1J1V2ozamVJQzlpUlo5bURYb0lCTwo5OGtzcldzdUs5NVc3emVxVllvSDZyUUNncm8xVVE2UW9nQmRwdWdxOGVtQzJsRjduUC9kOG16dzlxVisrRWtiCkh1RElmbmtDZ1lBOEVuZk51NkZqamVxaDB2YTYwbCtsTUNKV3lkT2pTL3FwRExEa3p6OXI0bDdreFQvZExITDMKWkdQS2g2aUU4amZVUCtCV0NSakFLYVFHMFA2V1k3djZkdEw4MTNWNE9qWWllSW9ndTNGUXBydVhKcFZhend5WQpRMGExNnAyYTU5ZEZnZGplTjNBcDlaSnRneVN1ZkRFMTVRbERJTmpnUng2S3d5cDNsamZWSmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: linkerd-policy-validator-webhook-config
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
webhooks:
- name: linkerd-policy-validator.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
  clientConfig:
    service:
      name: linkerd-policy-validator
      namespace: linkerd
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRZUs3Yi8zN2pMZjhWMEZJODBpeFdGREFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpFeE1ESXlNVGN5TVRFNVdoY05Nakl4TURJeU1UY3lNVEU1V2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUN5VzZkYzdZc0ZHaFdCeFdjWElqWGVIMXZEbnFQRFhaalU2dXZINndaUwpkY3FPUVM1MGJqQkU5MklIa0dCM1Y5cSt4eW1CVmRVSm0wbktHWVYrUlNWa0pKc2dnQlN2MGRQVUFNbVJJaFlrCkQ5N1ZqNWtkelhaZkg3L1NaWHlTMVBEZFV1L00vVFgwUjY2cjB0OGVFdG9vVERwV1JsS0Rrazh3Qkh4NjdlbkUKWlJpUW4xSWM0RklmdEhNK3BMOE52a0x3K0xVVUVRUkg2Z0plQ2N4Yk8xcm5HM2UrTU03eVEwc1NqMm5TWVdwVQpXQUVGdGdsZjU3cjNXRVFHNFhLcCt4anlWN2F5NkFFeGVUSFFQdW1MdUhpWnQ3YTZUeStqKy9IanNGeDR3N3IwCjl5c0FwVGk3cnQwclhyd2xVZE9jRmxHWlZJR1EyWHZRL3RGQWJaOFlQaERuQWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFYXVvN1l5NkNiT01Rb2cvUnc0Y05sTzF6TC8KRzc1Z0pMSUEyM2xGczhBTmViUHpHNnMwSWRGSGJuL1czWEdEWGtYM0dLcVB5czJ4Y04xaDZkRTZreEFFcFRZdgowVGo4UDNmZTl2ZVdMelQzZTJrejgxY0ZJbmU2R1NIQThZa3FNVmtGZndINU9zM0pYRmF1ckttWXVDQ3M0ejdyCkVSMVZmZFM3T1NNQTVHZ1hTTUlzWU9xNmNKV0pHUnE4Y2l3N2tGeWRwVmNkTmRGNWk5bDkrb0JIT1Y2d3dnSkYKM2YxK2pOa0N2aFMwR2ZVMGNGTDhKaVV0RlMvSUYwdUhpSi9iWEMrUmFldmhERWVicHpSK1cvN3hvQVJaNStnUwo4UFJxN282OVpRY2IwVnlIemhNOWFScWRBTGprSXdOYlR6UGxiOTNrTm9tMWRWR1BUWlFOaUN0S3hjOD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["policy.linkerd.io"]
    apiVersions: ["v1alpha1", "v1beta1"]
    resources: ["servers"]
  sideEffects: None
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-policy
  labels:
    app.kubernetes.io/part-of: Linkerd
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - policy.linkerd.io
    resources:
      - servers
      - serverauthorizations
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-destination-policy
  labels:
    app.kubernetes.io/part-of: Linkerd
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-policy
subjects:
  - kind: ServiceAccount
    name: linkerd-destination
    namespace: linkerd
---
###
### Heartbeat RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    linkerd.io/control-plane-ns: linkerd
roleRef:
  kind: Role
  name: linkerd-heartbeat
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: linkerd-heartbeat
  namespace: linkerd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-heartbeat
  labels:
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-heartbeat
  labels:
    linkerd.io/control-plane-ns: linkerd
roleRef:
  kind: ClusterRole
  name: linkerd-heartbeat
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: linkerd-heartbeat
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: heartbeat
    linkerd.io/control-plane-ns: linkerd
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: servers.policy.linkerd.io
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
  labels:
    linkerd.io/control-plane-ns: linkerd
spec:
  group: policy.linkerd.io
  names:
    kind: Server
    plural: servers
    singular: server
    shortNames: [srv]
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: false
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              type: object
              required:
                - podSelector
                - port
              properties:
                podSelector:
                  type: object
                  description: >-
                    Selects pods in the same namespace.
                  oneOf:
                    - required: [matchExpressions]
                    - required: [matchLabels]
                  properties:
                    matchLabels:
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    matchExpressions:
                      type: array
                      items:
                        type: object
                        required: [key, operator]
                        properties:
                          key:
                            type: string
                          operator:
                            type: string
                            enum: [In, NotIn, Exists, DoesNotExist]
                          values:
                            type: array
                            items:
                              type: string
                port:
                  description: >-
                    A port name or number. Must exist in a pod spec.
                  x-kubernetes-int-or-string: true
                proxyProtocol:
                  description: >-
                    Configures protocol discovery for inbound connections.

                    Supersedes the `config.linkerd.io/opaque-ports` annotation.
                  type: string
                  default: unknown
                  enum:
                    - unknown
                    - HTTP/1
                    - HTTP/2
                    - gRPC
                    - opaque
                    - TLS
    - name: v1beta1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              type: object
              required:
                - podSelector
                - port
              properties:
                podSelector:
                  type: object
                  description: >-
                    Selects pods in the same namespace.
                  oneOf:
                    - required: [matchExpressions]
                    - required: [matchLabels]
                  properties:
                    matchLabels:
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    matchExpressions:
                      type: array
                      items:
                        type: object
                        required: [key, operator]
                        properties:
                          key:
                            type: string
                          operator:
                            type: string
                            enum: [In, NotIn, Exists, DoesNotExist]
                          values:
                            type: array
                            items:
                              type: string
                port:
                  description: >-
                    A port name or number. Must exist in a pod spec.
                  x-kubernetes-int-or-string: true
                proxyProtocol:
                  description: >-
                    Configures protocol discovery for inbound connections.

                    Supersedes the `config.linkerd.io/opaque-ports` annotation.
                  type: string
                  default: unknown
                  enum:
                    - unknown
                    - HTTP/1
                    - HTTP/2
                    - gRPC
                    - opaque
                    - TLS
      additionalPrinterColumns:
      - name: Port
        type: string
        description: The port the server is listening on
        jsonPath: .spec.port
      - name: Protocol
        type: string
        description: The protocol of the server
        jsonPath: .spec.proxyProtocol
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: serverauthorizations.policy.linkerd.io
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
  labels:
    linkerd.io/control-plane-ns: linkerd
spec:
  group: policy.linkerd.io
  scope: Namespaced
  names:
    kind: ServerAuthorization
    plural: serverauthorizations
    singular: serverauthorization
    shortNames: [saz]
  versions:
    - name: v1alpha1
      served: true
      storage: false
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              description: >-
                Authorizes clients to communicate with Linkerd-proxied servers.
              type: object
              required: [server, client]
              properties:
                server:
                  description: >-
                    Identifies servers in the same namespace for which this
                    authorization applies.

                    Only one of `name` or `selector` may be specified.
                  type: object
                  oneOf:
                    - required: [name]
                    - required: [selector]
                  properties:
                    name:
                      description: References a `Server` instance by name
                      type: string
                      pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                    selector:
                      description: >-
                        A label query over servers on which this authorization applies.
                      type: object
                      oneOf:
                        - required: [matchLabels]
                        - required: [matchExpressions]
                      properties:
                        matchLabels:
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        matchExpressions:
                          type: array
                          items:
                            type: object
                            required: [key, operator]
                            properties:
                              key:
                                type: string
                              operator:
                                type: string
                                enum: [In, NotIn, Exists, DoesNotExist]
                              values:
                                type: array
                                items:
                                  type: string
                client:
                  description:  Describes clients authorized to access a server.
                  type: object
                  oneOf:
                    - required: [meshTLS]
                    - required: [unauthenticated]
                  properties:
                    networks:
                      description: >-
                        Limits the client IP addresses to which this
                        authorization applies. If unset, the server chooses a
                        default (typically, all IPs or the cluster's pod
                        network).
                      type: array
                      items:
                        type: object
                        required: [cidr]
                        properties:
                          cidr:
                            type: string
                          except:
                            type: array
                            items:
                              type: string
                    unauthenticated:
                      description: >-
                        Authorizes unauthenticated clients to access a server.
                      type: boolean
                    meshTLS:
                      type: object
                      oneOf:
                        - required: [unauthenticatedTLS]
                        - required: [identities]
                        - required: [serviceAccounts]
                      properties:
                        unauthenticatedTLS:
                          type: boolean
                          description: >-
                            Indicates that no client identity is required for
                            communication.

                            This is mostly important for the identity
                            controller, which must terminate TLS connections
                            from clients that do not yet have a certificate.
                        identities:
                          description: >-
                            Authorizes clients with the provided proxy identity
                            strings (as provided via MTLS)

                            The `*` prefix can be used to match all identities in
                            a domain. An identity string of `*` indicates that
                            all authentication clients are authorized.
                          type: array
                          items:
                            type: string
                            pattern: '^(\*|[a-z0-9]([-a-z0-9]*[a-z0-9])?)(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
                        serviceAccounts:
                          description: >-
                            Authorizes clients with the provided proxy identity
                            service accounts (as provided via MTLS)
                          type: array
                          items:
                            type: object
                            required: [name]
                            properties:
                              name:
                                description: The ServiceAccount's name.
                                type: string
                                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                              namespace:
                                description: >-
                                  The ServiceAccount's namespace. If unset, the
                                  authorization's namespace is used.
                                type: string
                                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
    - name: v1beta1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              description: >-
                Authorizes clients to communicate with Linkerd-proxied servers.
              type: object
              required: [server, client]
              properties:
                server:
                  description: >-
                    Identifies servers in the same namespace for which this
                    authorization applies.

                    Only one of `name` or `selector` may be specified.
                  type: object
                  oneOf:
                    - required: [name]
                    - required: [selector]
                  properties:
                    name:
                      description: References a `Server` instance by name
                      type: string
                      pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                    selector:
                      description: >-
                        A label query over servers on which this authorization applies.
                      type: object
                      oneOf:
                        - required: [matchLabels]
                        - required: [matchExpressions]
                      properties:
                        matchLabels:
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        matchExpressions:
                          type: array
                          items:
                            type: object
                            required: [key, operator]
                            properties:
                              key:
                                type: string
                              operator:
                                type: string
                                enum: [In, NotIn, Exists, DoesNotExist]
                              values:
                                type: array
                                items:
                                  type: string
                client:
                  description:  Describes clients authorized to access a server.
                  type: object
                  oneOf:
                    - required: [meshTLS]
                    - required: [unauthenticated]
                  properties:
                    networks:
                      description: >-
                        Limits the client IP addresses to which this
                        authorization applies. If unset, the server chooses a
                        default (typically, all IPs or the cluster's pod
                        network).
                      type: array
                      items:
                        type: object
                        required: [cidr]
                        properties:
                          cidr:
                            type: string
                          except:
                            type: array
                            items:
                              type: string
                    unauthenticated:
                      description: >-
                        Authorizes unauthenticated clients to access a server.
                      type: boolean
                    meshTLS:
                      type: object
                      oneOf:
                        - required: [unauthenticatedTLS]
                        - required: [identities]
                        - required: [serviceAccounts]
                      properties:
                        unauthenticatedTLS:
                          type: boolean
                          description: >-
                            Indicates that no client identity is required for
                            communication.

                            This is mostly important for the identity
                            controller, which must terminate TLS connections
                            from clients that do not yet have a certificate.
                        identities:
                          description: >-
                            Authorizes clients with the provided proxy identity
                            strings (as provided via MTLS)

                            The `*` prefix can be used to match all identities in
                            a domain. An identity string of `*` indicates that
                            all authentication clients are authorized.
                          type: array
                          items:
                            type: string
                            pattern: '^(\*|[a-z0-9]([-a-z0-9]*[a-z0-9])?)(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
                        serviceAccounts:
                          description: >-
                            Authorizes clients with the provided proxy identity
                            service accounts (as provided via MTLS)
                          type: array
                          items:
                            type: object
                            required: [name]
                            properties:
                              name:
                                description: The ServiceAccount's name.
                                type: string
                                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                              namespace:
                                description: >-
                                  The ServiceAccount's namespace. If unset, the
                                  authorization's namespace is used.
                                type: string
                                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
      additionalPrinterColumns:
      - name: Server
        type: string
        description: The server that this grants access to
        jsonPath: .spec.server.name
---
###
### Service Profile CRD
###
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: serviceprofiles.linkerd.io
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
  labels:
    linkerd.io/control-plane-ns: linkerd
spec:
  group: linkerd.io
  versions:
  - name: v1alpha1
    served: true
    storage: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            description: Spec is the custom resource spec
            required:
            - routes
            properties:
              dstOverrides:
                type: array
                required:
                - authority
                - weight
                items:
                  type: object
                  description: WeightedDst is a weighted alternate destination.
                  properties:
                    authority:
                      type: string
                    weight:
                      x-kubernetes-int-or-string: true
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
              opaquePorts:
                type: array
                items:
                  type: string
              retryBudget:
                type: object
                required:
                - minRetriesPerSecond
                - retryRatio
                - ttl
                description: RetryBudget describes the maximum number of retries that should be issued to this service.
                properties:
                  minRetriesPerSecond:
                    format: int32
                    type: integer
                  retryRatio:
                    type: number
                    format: float
                  ttl:
                    type: string
              routes:
                type: array
                items:
                  type: object
                  description: RouteSpec specifies a Route resource.
                  required:
                  - condition
                  - name
                  properties:
                    condition:
                      type: object
                      description: RequestMatch describes the conditions under which to match a Route.
                      properties:
                        pathRegex:
                          type: string
                        method:
                          type: string
                        all:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                        any:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                        not:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                    isRetryable:
                      type: boolean
                    name:
                      type: string
                    timeout:
                      type: string
                    responseClasses:
                      type: array
                      items:
                        type: object
                        required:
                        - condition
                        description: ResponseClass describes how to classify a response (e.g. success or failures).
                        properties:
                          condition:
                            type: object
                            description: ResponseMatch describes the conditions under
                              which to classify a response.
                            properties:
                              all:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              any:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              not:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              status:
                                type: object
                                description: Range describes a range of integers (e.g. status codes).
                                properties:
                                  max:
                                    format: int32
                                    type: integer
                                  min:
                                    format: int32
                                    type: integer
                          isFailure:
                            type: boolean
  - name: v1alpha2
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            description: Spec is the custom resource spec
            properties:
              dstOverrides:
                type: array
                required:
                - authority
                - weight
                items:
                  type: object
                  description: WeightedDst is a weighted alternate destination.
                  properties:
                    authority:
                      type: string
                    weight:
                      x-kubernetes-int-or-string: true
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
              opaquePorts:
                type: array
                items:
                  type: string
              retryBudget:
                type: object
                required:
                - minRetriesPerSecond
                - retryRatio
                - ttl
                description: RetryBudget describes the maximum number of retries that should be issued to this service.
                properties:
                  minRetriesPerSecond:
                    format: int32
                    type: integer
                  retryRatio:
                    type: number
                    format: float
                  ttl:
                    type: string
              routes:
                type: array
                items:
                  type: object
                  description: RouteSpec specifies a Route resource.
                  required:
                  - condition
                  - name
                  properties:
                    condition:
                      type: object
                      description: RequestMatch describes the conditions under which to match a Route.
                      properties:
                        pathRegex:
                          type: string
                        method:
                          type: string
                        all:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                        any:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                        not:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                    isRetryable:
                      type: boolean
                    name:
                      type: string
                    timeout:
                      type: string
                    responseClasses:
                      type: array
                      items:
                        type: object
                        required:
                        - condition
                        description: ResponseClass describes how to classify a response (e.g. success or failures).
                        properties:
                          condition:
                            type: object
                            description: ResponseMatch describes the conditions under
                              which to classify a response.
                            properties:
                              all:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              any:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              not:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              status:
                                type: object
                                description: Range describes a range of integers (e.g. status codes).
                                properties:
                                  max:
                                    format: int32
                                    type: integer
                                  min:
                                    format: int32
                                    type: integer
                          isFailure:
                            type: boolean
  scope: Namespaced
  preserveUnknownFields: false
  names:
    plural: serviceprofiles
    singular: serviceprofile
    kind: ServiceProfile
    shortNames:
    - sp
---
###
### TrafficSplit CRD
### Copied from github.com/servicemeshinterface/smi-sdk-go/blob/d4e76b1cd7a33ead5f38d1262dd838a31c80f4e5/crds/split.yaml
###
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: trafficsplits.split.smi-spec.io
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
  labels:
    linkerd.io/control-plane-ns: linkerd
spec:
  group: split.smi-spec.io
  scope: Namespaced
  conversion:
    strategy: None
  names:
    kind: TrafficSplit
    listKind: TrafficSplitList
    shortNames:
      - ts
    plural: trafficsplits
    singular: trafficsplit
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              required:
                - service
                - backends
              properties:
                service:
                  description: The apex service of this split.
                  type: string
                backends:
                  description: The backend services of this split.
                  type: array
                  items:
                    type: object
                    required: ['service', 'weight']
                    properties:
                      service:
                        description: Name of the Kubernetes service.
                        type: string
                      weight:
                        description: Traffic weight value of this backend.
                        x-kubernetes-int-or-string: true
      additionalPrinterColumns:
      - name: Service
        type: string
        description: The apex service of this split.
        jsonPath: .spec.service
    - name: v1alpha2
      served: true
      storage: false
      additionalPrinterColumns:
      - name: Service
        type: string
        description: The apex service of this split.
        jsonPath: .spec.service
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              required:
                - service
                - backends
              properties:
                service:
                  description: The apex service of this split.
                  type: string
                backends:
                  description: The backend services of this split.
                  type: array
                  items:
                    type: object
                    required: ['service', 'weight']
                    properties:
                      service:
                        description: Name of the Kubernetes service.
                        type: string
                      weight:
                        description: Traffic weight value of this backend.
                        type: number
  preserveUnknownFields: false
---
###
### Proxy Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-proxy-injector
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: [""]
  resources: ["namespaces", "replicationcontrollers"]
  verbs: ["list", "get", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-proxy-injector
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
subjects:
- kind: ServiceAccount
  name: linkerd-proxy-injector
  namespace: linkerd
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-proxy-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-proxy-injector
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-proxy-injector-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQU53bXQxVWFIU3d5aThxaGk5N1QvbWN3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TVRFd01qSXhOekl4TVRoYUZ3MHlNakV3TWpJeE56SXhNVGhhTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRQzVaaGIvZmlyeUhQc0xLTVllVSs3U2NEM3NBK3laT1ViaG5DSlpOaW05WlhmZgpKWFNIRW9CNFcydStRNUgxQXp2YktBR0lqUUJ4UktTc3RrYWpiVmJ3K1BCL1d1WDdkQkRVaUUvMjBmU01Ndjg4CnU5V1d4NDhBMVFVUWJqTDlhaWNYNUNoakJvK2t3SWYwY3hMZGt0RmNhb2Q2WU5QRzRqWUU4RTRrZ1duSnl2UjkKdjZHbzVSMnVXRnpBa3VpL1JUVnNJZWZmVU5RYmFsRmZjU0pYb0RMOEJEYTVzaGFwSWkyY1E5YWtrZE5FM1FEbQpCOUlIWHlIS3lQNTcxZ3NaVjd3bFN5R0RHWjRLOWdESDl1bW1iYklQeVo3NWlrdmRPSHJpYlJMa3ZZZXJPVzVYCmo5RmV5dE5kcXJFazg5VEZ6bEVrOUUvMDdIMFNGeE12akFmODcxMGhBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ4b0FIcitLSVZoWEhXeTl1REJua1VFT0lUaUFBRTVYck8KMXdyRHY4UnB2bmtjSGFOcFFHelU3andsbThTQ25aRkVPYkVKM1NwUmlFNFNLRm80S1ZLRk9iaGpwTis2VCtaQgpJY2tQeGFFc0gxZDc4cmtRL0lvY1VlUmgvSldPb1YwZHV3VFNYV1RJTSs1a1BoQUU3dG1WOWFReExWa1lZSlB6ClVyMm9mTXZ6a0J6N0liZmZkUmlxNmFhL0xQU2JYZTBOa1F0Z1AyOG5Mc0t5TGprSXVjVXJ0NTkrZ1NpTWRCWUsKUTVGQ1p6VGVrVzRMaHh5QkRiRk1xb2J5RGNOVVowblMyQUYwNEZEODhoVStIOVFzalJ0anBRU0pPMkdhWDRoRgpyckNMSmozOVFaZ2tPMGl0SlRJOGFqNDRUYy9kTFAvSG1YNkdWdkIyeUpqWDd2M2hQWHVrCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdVdZVy8zNHE4aHo3Q3lqR0hsUHUwbkE5N0FQc21UbEc0WndpV1RZcHZXVjMzeVYwCmh4S0FlRnRydmtPUjlRTTcyeWdCaUkwQWNVU2tyTFpHbzIxVzhQandmMXJsKzNRUTFJaFA5dEgwakRML1BMdlYKbHNlUEFOVUZFRzR5L1dvbkYrUW9Zd2FQcE1DSDlITVMzWkxSWEdxSGVtRFR4dUkyQlBCT0pJRnB5Y3IwZmIraApxT1VkcmxoY3dKTG92MFUxYkNIbjMxRFVHMnBSWDNFaVY2QXkvQVEydWJJV3FTSXRuRVBXcEpIVFJOMEE1Z2ZTCkIxOGh5c2orZTlZTEdWZThKVXNoZ3htZUN2WUF4L2JwcG0yeUQ4bWUrWXBMM1RoNjRtMFM1TDJIcXpsdVY0L1IKWHNyVFhhcXhKUFBVeGM1UkpQUlA5T3g5RWhjVEw0d0gvTzlkSVFJREFRQUJBb0lCQUFSZm5pZEV5S3FSZUhLWQo4YU9CZzE2L2V4WjRPVHFjR1VuMUx2SS96dGhDN29MN0ZUYWlmeGxYdnNEc1F5TXVnbGozSnFJY0FXaXFuOS9iCkpPdHlCdDBFWWxmK3d2SWRtTkFLcnlnNVo3VnU5b3B1Tytta3A0RHpoWDBQdkhBeDh0NGphYmg4VFNNcno0azYKdGJVNFkydjByMkY1cTBWRHpOWnMvTXJycXAweC9DUS9XNExqMm1jMTQwVEFCRUg2Qjd1enNsWmVkTFJMZlhiLwppb2pydllON2tVUVNFbVlQWWFDd1VaRzZBNFZ6OHlXMjhHREhGSUw0NFUvM3IzMHdDVWZoR2ZYOXU1U1pqRVV6Ck1xdHRQM1hxL0lsZlUySmlBaEoxSFJuN0tHa3R4Ym80c2kxSGloTWhEdEJ3eEpOL1ZoakMrSit1YjkxcDJ2Z08KcTBXcTRja0NnWUVBN3Fqd0dtZXdETW82aXFRcVBQbEZkSnlUd2w5VHkzTGxYUmpuUFJOZnlrTVRLR0hTL3JJMAp2V1hYQkNZaGExZXdxWkgrNDdFU2RPYTlrSFFOU3M4K244SjhUYktzZjhMZ1ZRSHNIUzZCbEdpQi9YTDFGQjRXCkducy9Nblg3S0IyL21IVS9nSjgvUjF4ZFNPVnA1b3FDdUUraXFVU1MzYThOV1lLU2NJcDBNYnNDZ1lFQXh0NS8KYkdOc2ZWZFJaN0tNN3dEbW9ibDE5c3NJeDByRGxpUHQvUWpzNFdaTXF3ek55M0RXVHNDSTdmbGYrTDA5ZG9PMQp5a2trWTdFazRpSWM5Y3Vxd0ZVcWx3Y2ZDQW1pOElqY3lXSm8wcDFGUE1uVnJBbS84UXpuRStvKzFMdlBkZGY2CkpMU3B5bnlrMk81NE5ialRjbWFIWjFOeDM2ajJkQ1NYQXdZcElOTUNnWUVBMzhRSDgwbjZsOU5ZbGpzYjJ6V0EKdUxoQ0ZnR1pLRzBldm00bUNXN0w1bkdEV2Q1Mm5SVnJPNVZyeDFrVkJuY2VqYTcwUkhuMnF5TFk0OExiMzZOMgp2UVgxMUVmTlVyRGQ4dll0Y3FMekhibnEvejYwcU5zWXNGV1VTSFMwT3NYQnFXbHRVK1I3eVNYQjFTSThhOHE4Cmk2RW5DdnZmay9pWVZLK0hLL3UwdkJjQ2dZQkpDSVU3UlBnZXYrYUJjcTBYU1BscUF6WXpRRFVsRzJ2Z3c2a3UKK0F3bWF1OVZFZ3F4MytxVVdWandMRmoyZkdrS0VTeTk4VWFQNWdwcGthV1pEd2JTUTNTMHFrVFhLdExRQ3pNcQpNaDNVMnpVR01nbHFlTm9vcUZoa2srNG5LaUh5WVRMWU1CRDY3L09LUjJtV01SNVdNUmtnOVNBb3gyQmJIdVRtCmsyaWZTUUtCZ1FDR3FiR1hsU1ozeXJwVXR6Q3FYWkUwc0crVW9QQXNjOTVyOUJlaG4rVXFKY0VQV3BaK1hNdDcKWnFkbkdMK0I2N29IT0UwSFIyM2ZlVFQ2QlBKT2piTTVITFU5T1VaamM5bGZJWXlTU3k4RmNqcmFqdnJqVW93cwpVWlNRSVltRklwK0pjWWFmNnRSSll5bk5icHpTZGFkeXovYmFSVEtuQm9teGY0SThxMGR2aWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-proxy-injector-webhook-config
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
webhooks:
- name: linkerd-proxy-injector.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
  clientConfig:
    service:
      name: linkerd-proxy-injector
      namespace: linkerd
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQU53bXQxVWFIU3d5aThxaGk5N1QvbWN3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TVRFd01qSXhOekl4TVRoYUZ3MHlNakV3TWpJeE56SXhNVGhhTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRQzVaaGIvZmlyeUhQc0xLTVllVSs3U2NEM3NBK3laT1ViaG5DSlpOaW05WlhmZgpKWFNIRW9CNFcydStRNUgxQXp2YktBR0lqUUJ4UktTc3RrYWpiVmJ3K1BCL1d1WDdkQkRVaUUvMjBmU01Ndjg4CnU5V1d4NDhBMVFVUWJqTDlhaWNYNUNoakJvK2t3SWYwY3hMZGt0RmNhb2Q2WU5QRzRqWUU4RTRrZ1duSnl2UjkKdjZHbzVSMnVXRnpBa3VpL1JUVnNJZWZmVU5RYmFsRmZjU0pYb0RMOEJEYTVzaGFwSWkyY1E5YWtrZE5FM1FEbQpCOUlIWHlIS3lQNTcxZ3NaVjd3bFN5R0RHWjRLOWdESDl1bW1iYklQeVo3NWlrdmRPSHJpYlJMa3ZZZXJPVzVYCmo5RmV5dE5kcXJFazg5VEZ6bEVrOUUvMDdIMFNGeE12akFmODcxMGhBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ4b0FIcitLSVZoWEhXeTl1REJua1VFT0lUaUFBRTVYck8KMXdyRHY4UnB2bmtjSGFOcFFHelU3andsbThTQ25aRkVPYkVKM1NwUmlFNFNLRm80S1ZLRk9iaGpwTis2VCtaQgpJY2tQeGFFc0gxZDc4cmtRL0lvY1VlUmgvSldPb1YwZHV3VFNYV1RJTSs1a1BoQUU3dG1WOWFReExWa1lZSlB6ClVyMm9mTXZ6a0J6N0liZmZkUmlxNmFhL0xQU2JYZTBOa1F0Z1AyOG5Mc0t5TGprSXVjVXJ0NTkrZ1NpTWRCWUsKUTVGQ1p6VGVrVzRMaHh5QkRiRk1xb2J5RGNOVVowblMyQUYwNEZEODhoVStIOVFzalJ0anBRU0pPMkdhWDRoRgpyckNMSmozOVFaZ2tPMGl0SlRJOGFqNDRUYy9kTFAvSG1YNkdWdkIyeUpqWDd2M2hQWHVrCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods", "services"]
  sideEffects: None
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: linkerd-config
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: controller
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
data:
  values: |
    cliVersion: linkerd/cli edge-21.10.3
    clusterDomain: cluster.local
    clusterNetworks: 10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16
    cniEnabled: false
    controlPlaneTracing: false
    controlPlaneTracingNamespace: linkerd-jaeger
    controllerImage: cr.l5d.io/linkerd/controller
    controllerImageVersion: edge-21.10.3
    controllerLogFormat: plain
    controllerLogLevel: info
    controllerReplicas: 1
    controllerUID: 2103
    debugContainer:
      image:
        name: cr.l5d.io/linkerd/debug
        pullPolicy: ""
        version: edge-21.10.3
    destinationProxyResources: null
    destinationResources: null
    disableHeartBeat: false
    enableEndpointSlices: false
    enableH2Upgrade: true
    enablePodAntiAffinity: false
    grafanaUrl: ""
    heartbeatResources: null
    heartbeatSchedule: ""
    highAvailability: false
    identity:
      issuer:
        clockSkewAllowance: 20s
        externalCA: false
        issuanceLifetime: 24h0m0s
        scheme: linkerd.io/tls
        tls:
          crtPEM: |
            -----BEGIN CERTIFICATE-----
            MIIBiDCCAS6gAwIBAgIBATAKBggqhkjOPQQDAjAcMRowGAYDVQQDExFpZGVudGl0
            eS5saW5rZXJkLjAeFw0yMTEwMTAxNjU3NThaFw0yMjEwMTAxNjU4MThaMBwxGjAY
            BgNVBAMTEWlkZW50aXR5LmxpbmtlcmQuMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD
            QgAEgaXUjo0QWwBGviRmjtNt7EgQup/HZwYU7fM1wVaZNpBDiYM3ChpoqshPUOyV
            p5y24cu+42xQDlBIFOQNVB/a7aNhMF8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdJQQW
            MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
            BBQb1s6RiygKK6AB9tLGxa45HV0OUDAKBggqhkjOPQQDAgNIADBFAiEA7CFVk8zK
            b+rIunBlCuMaYj+/ycM1EY7qhSzdgSSQHgICIHaM03ErFQW37E5SaRykdmFCJyB+
            Q0Qe1QeBJVpuhiWw
            -----END CERTIFICATE-----
    identityProxyResources: null
    identityResources: null
    identityTrustAnchorsPEM: |
      -----BEGIN CERTIFICATE-----
      MIIBiDCCAS6gAwIBAgIBATAKBggqhkjOPQQDAjAcMRowGAYDVQQDExFpZGVudGl0
      eS5saW5rZXJkLjAeFw0yMTEwMTAxNjU3NThaFw0yMjEwMTAxNjU4MThaMBwxGjAY
      BgNVBAMTEWlkZW50aXR5LmxpbmtlcmQuMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD
      QgAEgaXUjo0QWwBGviRmjtNt7EgQup/HZwYU7fM1wVaZNpBDiYM3ChpoqshPUOyV
      p5y24cu+42xQDlBIFOQNVB/a7aNhMF8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdJQQW
      MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
      BBQb1s6RiygKK6AB9tLGxa45HV0OUDAKBggqhkjOPQQDAgNIADBFAiEA7CFVk8zK
      b+rIunBlCuMaYj+/ycM1EY7qhSzdgSSQHgICIHaM03ErFQW37E5SaRykdmFCJyB+
      Q0Qe1QeBJVpuhiWw
      -----END CERTIFICATE-----
    identityTrustDomain: cluster.local
    imagePullPolicy: IfNotPresent
    imagePullSecrets: []
    installNamespace: true
    linkerdVersion: edge-21.10.3
    namespace: linkerd
    nodeSelector:
      beta.kubernetes.io/os: linux
    podAnnotations: {}
    podLabels: {}
    policyController:
      defaultAllowPolicy: all-unauthenticated
      image:
        name: cr.l5d.io/linkerd/policy-controller
        pullPolicy: ""
        version: ""
      logLevel: linkerd=info,warn
      resources:
        cpu:
          limit: ""
          request: ""
        memory:
          limit: ""
          request: ""
    policyValidator:
      caBundle: ""
      crtPEM: ""
      externalSecret: false
      keyPEM: ""
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
    priorityClassName: ""
    profileValidator:
      caBundle: ""
      crtPEM: ""
      externalSecret: false
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
    prometheusUrl: ""
    proxy:
      await: true
      capabilities: null
      defaultInboundPolicy: ""
      disableIdentity: false
      enableExternalProfiles: false
      image:
        name: cr.l5d.io/linkerd/proxy
        pullPolicy: ""
        version: edge-21.10.3
      inboundConnectTimeout: 100ms
      isGateway: false
      isIngress: false
      logFormat: plain
      logLevel: warn,linkerd=info
      opaquePorts: 25,587,3306,4444,5432,6379,9300,11211
      outboundConnectTimeout: 1000ms
      podInboundPorts: ""
      ports:
        admin: 4191
        control: 4190
        inbound: 4143
        outbound: 4140
      requireIdentityOnInboundPorts: ""
      resources:
        cpu:
          limit: ""
          request: ""
        memory:
          limit: ""
          request: ""
      saMountPath: null
      uid: 2102
      waitBeforeExitSeconds: 0
    proxyContainerName: linkerd-proxy
    proxyInit:
      capabilities: null
      closeWaitTimeoutSecs: 0
      ignoreInboundPorts: 4567,4568
      ignoreOutboundPorts: 4567,4568
      image:
        name: cr.l5d.io/linkerd/proxy-init
        pullPolicy: ""
        version: v1.4.1
      resources:
        cpu:
          limit: 100m
          request: 10m
        memory:
          limit: 50Mi
          request: 10Mi
      saMountPath: null
      xtMountPath:
        mountPath: /run
        name: linkerd-proxy-init-xtables-lock
        readOnly: false
    proxyInjector:
      caBundle: ""
      crtPEM: ""
      externalSecret: false
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
    proxyInjectorProxyResources: null
    proxyInjectorResources: null
    tolerations: null
    webhookFailurePolicy: Ignore
---
###
### Identity Controller Service
###
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-identity-issuer
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
data:
  crt.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJpRENDQVM2Z0F3SUJBZ0lCQVRBS0JnZ3Foa2pPUFFRREFqQWNNUm93R0FZRFZRUURFeEZwWkdWdWRHbDAKZVM1c2FXNXJaWEprTGpBZUZ3MHlNVEV3TVRBeE5qVTNOVGhhRncweU1qRXdNVEF4TmpVNE1UaGFNQnd4R2pBWQpCZ05WQkFNVEVXbGtaVzUwYVhSNUxteHBibXRsY21RdU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEClFnQUVnYVhVam8wUVd3Qkd2aVJtanROdDdFZ1F1cC9IWndZVTdmTTF3VmFaTnBCRGlZTTNDaHBvcXNoUFVPeVYKcDV5MjRjdSs0MnhRRGxCSUZPUU5WQi9hN2FOaE1GOHdEZ1lEVlIwUEFRSC9CQVFEQWdFR01CMEdBMVVkSlFRVwpNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXCkJCUWIxczZSaXlnS0s2QUI5dExHeGE0NUhWME9VREFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBN0NGVms4eksKYitySXVuQmxDdU1hWWorL3ljTTFFWTdxaFN6ZGdTU1FIZ0lDSUhhTTAzRXJGUVczN0U1U2FSeWtkbUZDSnlCKwpRMFFlMVFlQkpWcHVoaVd3Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  key.pem: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUMrL0UzVlZaemhtOStWKzZSTFZaRjdxNmRReUJZdE80S0lPdVVOWmdYNUhvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFZ2FYVWpvMFFXd0JHdmlSbWp0TnQ3RWdRdXAvSFp3WVU3Zk0xd1ZhWk5wQkRpWU0zQ2hwbwpxc2hQVU95VnA1eTI0Y3UrNDJ4UURsQklGT1FOVkIvYTdRPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQ==
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: linkerd-identity-trust-roots
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
data:
  ca-bundle.crt: |
    -----BEGIN CERTIFICATE-----
    MIIBiDCCAS6gAwIBAgIBATAKBggqhkjOPQQDAjAcMRowGAYDVQQDExFpZGVudGl0
    eS5saW5rZXJkLjAeFw0yMTEwMTAxNjU3NThaFw0yMjEwMTAxNjU4MThaMBwxGjAY
    BgNVBAMTEWlkZW50aXR5LmxpbmtlcmQuMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD
    QgAEgaXUjo0QWwBGviRmjtNt7EgQup/HZwYU7fM1wVaZNpBDiYM3ChpoqshPUOyV
    p5y24cu+42xQDlBIFOQNVB/a7aNhMF8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdJQQW
    MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
    BBQb1s6RiygKK6AB9tLGxa45HV0OUDAKBggqhkjOPQQDAgNIADBFAiEA7CFVk8zK
    b+rIunBlCuMaYj+/ycM1EY7qhSzdgSSQHgICIHaM03ErFQW37E5SaRykdmFCJyB+
    Q0Qe1QeBJVpuhiWw
    -----END CERTIFICATE-----
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-identity
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: identity
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-identity-headless
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: identity
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
  labels:
    app.kubernetes.io/name: identity
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-21.10.3
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-identity
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: identity
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-identity
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/cli edge-21.10.3
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: edge-21.10.3
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: identity
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-identity
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - identity
        - -log-level=info
        - -log-format=plain
        - -controller-namespace=linkerd
        - -identity-trust-domain=cluster.local
        - -identity-issuance-lifetime=24h0m0s
        - -identity-clock-skew-allowance=20s
        - -identity-scheme=linkerd.io/tls
        env:
        - name: LINKERD_DISABLED
          value: "linkerd-await cannot block the identity controller"
        image: cr.l5d.io/linkerd/controller:edge-21.10.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9990
          initialDelaySeconds: 10
        name: identity
        ports:
        - containerPort: 8080
          name: grpc
        - containerPort: 9990
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9990
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/issuer
          name: identity-issuer
        - mountPath: /var/run/linkerd/identity/trust-roots/
          name: trust-roots
      - env:
        - name: _pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: _pod_nodeName
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS
          value: "8080"
        - name: LINKERD2_PROXY_LOG
          value: "warn,linkerd=info"
        - name: LINKERD2_PROXY_LOG_FORMAT
          value: "plain"
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst-headless.linkerd.svc.cluster.local.:8086
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_POLICY_SVC_ADDR
          value: linkerd-policy.linkerd.svc.cluster.local.:8090
        - name: LINKERD2_PROXY_POLICY_WORKLOAD
          value: "$(_pod_ns):$(_pod_name)"
        - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
          value: all-unauthenticated
        - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
          value: "100ms"
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
          value: "1000ms"
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_INBOUND_IPS
          valueFrom:
            fieldRef:
              fieldPath: status.podIPs
        - name: LINKERD2_PROXY_INBOUND_PORTS
          value: "8080,9990"
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
          value: "25,587,3306,4444,5432,6379,9300,11211"
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: |
            {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            configMapKeyRef:
              name: linkerd-identity-trust-roots
              key: ca-bundle.crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: localhost.:8080
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_POLICY_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        image: cr.l5d.io/linkerd/proxy:edge-21.10.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - "4190,4191,4567,4568"
        - --outbound-ports-to-ignore
        - "443"
        image: cr.l5d.io/linkerd/proxy-init:v1.4.1
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "10m"
            memory: "10Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /run
          name: linkerd-proxy-init-xtables-lock
      serviceAccountName: linkerd-identity
      volumes:
      - name: identity-issuer
        secret:
          secretName: linkerd-identity-issuer
      - configMap:
          name: linkerd-identity-trust-roots
        name: trust-roots
      - emptyDir: {}
        name: linkerd-proxy-init-xtables-lock
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
###
### Destination Controller Service
###
kind: Service
apiVersion: v1
metadata:
  name: linkerd-dst
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: grpc
    port: 8086
    targetPort: 8086
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-dst-headless
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: grpc
    port: 8086
    targetPort: 8086
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-sp-validator
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: sp-validator
    port: 443
    targetPort: sp-validator
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-policy
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: grpc
    port: 8090
    targetPort: 8090
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-policy-validator
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: policy-https
    port: 443
    targetPort: policy-https
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
  labels:
    app.kubernetes.io/name: destination
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-21.10.3
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-destination
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: destination
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-destination
  template:
    metadata:
      annotations:
        checksum/config: 8d34f3f2f361877eb663f0d1f46bfeb427a96e2a12da7a273a7267098c8c2906
        linkerd.io/created-by: linkerd/cli edge-21.10.3
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: edge-21.10.3
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: destination
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-destination
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - env:
        - name: _pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: _pod_nodeName
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: LINKERD2_PROXY_LOG
          value: "warn,linkerd=info"
        - name: LINKERD2_PROXY_LOG_FORMAT
          value: "plain"
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: localhost.:8086
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_POLICY_SVC_ADDR
          value: localhost.:8090
        - name: LINKERD2_PROXY_POLICY_WORKLOAD
          value: "$(_pod_ns):$(_pod_name)"
        - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
          value: all-unauthenticated
        - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
          value: "100ms"
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
          value: "1000ms"
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_INBOUND_IPS
          valueFrom:
            fieldRef:
              fieldPath: status.podIPs
        - name: LINKERD2_PROXY_INBOUND_PORTS
          value: "8086,8090,8443,9443,9990,9996,9997"
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
          value: "25,587,3306,4444,5432,6379,9300,11211"
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: |
            {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            configMapKeyRef:
              name: linkerd-identity-trust-roots
              key: ca-bundle.crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity-headless.linkerd.svc.cluster.local.:8080
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_POLICY_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        image: cr.l5d.io/linkerd/proxy:edge-21.10.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        lifecycle:
          postStart:
            exec:
              command:
              - /usr/lib/linkerd/linkerd-await
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      - args:
        - destination
        - -addr=:8086
        - -controller-namespace=linkerd
        - -enable-h2-upgrade=true
        - -log-level=info
        - -log-format=plain
        - -enable-endpoint-slices=false
        - -cluster-domain=cluster.local
        - -identity-trust-domain=cluster.local
        - -default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211
        image: cr.l5d.io/linkerd/controller:edge-21.10.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9996
          initialDelaySeconds: 10
        name: destination
        ports:
        - containerPort: 8086
          name: grpc
        - containerPort: 9996
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9996
        securityContext:
          runAsUser: 2103
      - args:
        - sp-validator
        - -log-level=info
        - -log-format=plain
        image: cr.l5d.io/linkerd/controller:edge-21.10.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9997
          initialDelaySeconds: 10
        name: sp-validator
        ports:
        - containerPort: 8443
          name: sp-validator
        - containerPort: 9997
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9997
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: sp-tls
          readOnly: true
      - args:
        - --admin-addr=0.0.0.0:9990
        - --grpc-addr=0.0.0.0:8090
        - --admission-addr=0.0.0.0:9443
        - --cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16
        - --identity-domain=cluster.local
        - --default-policy=all-unauthenticated
        - --log-level=linkerd=info,warn
        - --log-format=plain
        image: cr.l5d.io/linkerd/policy-controller:edge-21.10.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ready
            port: admin
          initialDelaySeconds: 10
        name: policy
        ports:
        - containerPort: 8090
          name: grpc
        - containerPort: 9990
          name: admin
        - containerPort: 9443
          name: policy-https
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: admin
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: policy-tls
          readOnly: true
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - "4190,4191,4567,4568"
        - --outbound-ports-to-ignore
        - "443"
        image: cr.l5d.io/linkerd/proxy-init:v1.4.1
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "10m"
            memory: "10Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /run
          name: linkerd-proxy-init-xtables-lock
      serviceAccountName: linkerd-destination
      volumes:
      - name: sp-tls
        secret:
          secretName: linkerd-sp-validator-k8s-tls
      - name: policy-tls
        secret:
          secretName: linkerd-policy-validator-k8s-tls
      - emptyDir: {}
        name: linkerd-proxy-init-xtables-lock
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
###
### Heartbeat
###
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    app.kubernetes.io/name: heartbeat
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-21.10.3
    linkerd.io/control-plane-component: heartbeat
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
spec:
  concurrencyPolicy: Replace
  schedule: "31 17 * * *"
  successfulJobsHistoryLimit: 0
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            linkerd.io/control-plane-component: heartbeat
            linkerd.io/workload-ns: linkerd
          annotations:
            linkerd.io/created-by: linkerd/cli edge-21.10.3
        spec:
          nodeSelector:
            beta.kubernetes.io/os: linux
          serviceAccountName: linkerd-heartbeat
          restartPolicy: Never
          containers:
          - name: heartbeat
            image: cr.l5d.io/linkerd/controller:edge-21.10.3
            imagePullPolicy: IfNotPresent
            env:
            - name: LINKERD_DISABLED
              value: "the heartbeat controller does not use the proxy"
            args:
            - "heartbeat"
            - "-controller-namespace=linkerd"
            - "-log-level=info"
            - "-log-format=plain"
            - "-prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090"
            securityContext:
              runAsUser: 2103
---
###
### Proxy Injector
###
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
  labels:
    app.kubernetes.io/name: proxy-injector
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-21.10.3
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-proxy-injector
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: proxy-injector
  template:
    metadata:
      annotations:
        checksum/config: 0b9f92c989189a4d71437263f1743ca08dce97fe249fe92f817825bb23e0becd
        linkerd.io/created-by: linkerd/cli edge-21.10.3
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: edge-21.10.3
        config.linkerd.io/opaque-ports: "8443"
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: proxy-injector
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-proxy-injector
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - env:
        - name: _pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: _pod_nodeName
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: LINKERD2_PROXY_LOG
          value: "warn,linkerd=info"
        - name: LINKERD2_PROXY_LOG_FORMAT
          value: "plain"
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst-headless.linkerd.svc.cluster.local.:8086
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_POLICY_SVC_ADDR
          value: linkerd-policy.linkerd.svc.cluster.local.:8090
        - name: LINKERD2_PROXY_POLICY_WORKLOAD
          value: "$(_pod_ns):$(_pod_name)"
        - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
          value: all-unauthenticated
        - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
          value: "100ms"
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
          value: "1000ms"
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_INBOUND_IPS
          valueFrom:
            fieldRef:
              fieldPath: status.podIPs
        - name: LINKERD2_PROXY_INBOUND_PORTS
          value: "8443,9995"
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
          value: "25,587,3306,4444,5432,6379,9300,11211"
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: |
            {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            configMapKeyRef:
              name: linkerd-identity-trust-roots
              key: ca-bundle.crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity-headless.linkerd.svc.cluster.local.:8080
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_POLICY_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        image: cr.l5d.io/linkerd/proxy:edge-21.10.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        lifecycle:
          postStart:
            exec:
              command:
              - /usr/lib/linkerd/linkerd-await
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      - args:
        - proxy-injector
        - -log-level=info
        - -log-format=plain
        image: cr.l5d.io/linkerd/controller:edge-21.10.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: proxy-injector
        ports:
        - containerPort: 8443
          name: proxy-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/config
          name: config
        - mountPath: /var/run/linkerd/identity/trust-roots
          name: trust-roots
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - "4190,4191,4567,4568"
        - --outbound-ports-to-ignore
        - "4567,4568"
        image: cr.l5d.io/linkerd/proxy-init:v1.4.1
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "10m"
            memory: "10Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /run
          name: linkerd-proxy-init-xtables-lock
      serviceAccountName: linkerd-proxy-injector
      volumes:
      - configMap:
          name: linkerd-config
        name: config
      - configMap:
          name: linkerd-identity-trust-roots
        name: trust-roots
      - name: tls
        secret:
          secretName: linkerd-proxy-injector-k8s-tls
      - emptyDir: {}
        name: linkerd-proxy-init-xtables-lock
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-proxy-injector
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-21.10.3
    config.linkerd.io/opaque-ports: "443"
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: proxy-injector
  ports:
  - name: proxy-injector
    port: 443
    targetPort: proxy-injector
---
apiVersion: v1
data:
  linkerd-config-overrides: aWRlbnRpdHk6CiAgaXNzdWVyOgogICAgdGxzOgogICAgICBjcnRQRU06IHwKICAgICAgICAtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KICAgICAgICBNSUlCaURDQ0FTNmdBd0lCQWdJQkFUQUtCZ2dxaGtqT1BRUURBakFjTVJvd0dBWURWUVFERXhGcFpHVnVkR2wwCiAgICAgICAgZVM1c2FXNXJaWEprTGpBZUZ3MHlNVEV3TVRBeE5qVTNOVGhhRncweU1qRXdNVEF4TmpVNE1UaGFNQnd4R2pBWQogICAgICAgIEJnTlZCQU1URVdsa1pXNTBhWFI1TG14cGJtdGxjbVF1TUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0QKICAgICAgICBRZ0FFZ2FYVWpvMFFXd0JHdmlSbWp0TnQ3RWdRdXAvSFp3WVU3Zk0xd1ZhWk5wQkRpWU0zQ2hwb3FzaFBVT3lWCiAgICAgICAgcDV5MjRjdSs0MnhRRGxCSUZPUU5WQi9hN2FOaE1GOHdEZ1lEVlIwUEFRSC9CQVFEQWdFR01CMEdBMVVkSlFRVwogICAgICAgIE1CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQjBHQTFVZERnUVcKICAgICAgICBCQlFiMXM2Uml5Z0tLNkFCOXRMR3hhNDVIVjBPVURBS0JnZ3Foa2pPUFFRREFnTklBREJGQWlFQTdDRlZrOHpLCiAgICAgICAgYitySXVuQmxDdU1hWWorL3ljTTFFWTdxaFN6ZGdTU1FIZ0lDSUhhTTAzRXJGUVczN0U1U2FSeWtkbUZDSnlCKwogICAgICAgIFEwUWUxUWVCSlZwdWhpV3cKICAgICAgICAtLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCiAgICAgIGtleVBFTTogfAogICAgICAgIC0tLS0tQkVHSU4gRUMgUFJJVkFURSBLRVktLS0tLQogICAgICAgIE1IY0NBUUVFSUMrL0UzVlZaemhtOStWKzZSTFZaRjdxNmRReUJZdE80S0lPdVVOWmdYNUhvQW9HQ0NxR1NNNDkKICAgICAgICBBd0VIb1VRRFFnQUVnYVhVam8wUVd3Qkd2aVJtanROdDdFZ1F1cC9IWndZVTdmTTF3VmFaTnBCRGlZTTNDaHBvCiAgICAgICAgcXNoUFVPeVZwNXkyNGN1KzQyeFFEbEJJRk9RTlZCL2E3UT09CiAgICAgICAgLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQppZGVudGl0eVRydXN0QW5jaG9yc1BFTTogfAogIC0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQogIE1JSUJpRENDQVM2Z0F3SUJBZ0lCQVRBS0JnZ3Foa2pPUFFRREFqQWNNUm93R0FZRFZRUURFeEZwWkdWdWRHbDAKICBlUzVzYVc1clpYSmtMakFlRncweU1URXdNVEF4TmpVM05UaGFGdzB5TWpFd01UQXhOalU0TVRoYU1Cd3hHakFZCiAgQmdOVkJBTVRFV2xrWlc1MGFYUjVMbXhwYm10bGNtUXVNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRAogIFFnQUVnYVhVam8wUVd3Qkd2aVJtanROdDdFZ1F1cC9IWndZVTdmTTF3VmFaTnBCRGlZTTNDaHBvcXNoUFVPeVYKICBwNXkyNGN1KzQyeFFEbEJJRk9RTlZCL2E3YU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0VHTUIwR0ExVWRKUVFXCiAgTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRVwogIEJCUWIxczZSaXlnS0s2QUI5dExHeGE0NUhWME9VREFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBN0NGVms4eksKICBiK3JJdW5CbEN1TWFZaisveWNNMUVZN3FoU3pkZ1NTUUhnSUNJSGFNMDNFckZRVzM3RTVTYVJ5a2RtRkNKeUIrCiAgUTBRZTFRZUJKVnB1aGlXdwogIC0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-config-overrides
  namespace: linkerd
